[{"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/reportWebVitals.js":"1","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/index.js":"2","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/App.js":"3","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/PostCreate.js":"4","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/PostList.js":"5","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/CommentList.js":"6","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/CommentCreate.js":"7"},{"size":362,"mtime":1611707905060,"results":"8","hashOfConfig":"9"},{"size":472,"mtime":1611760655655,"results":"10","hashOfConfig":"9"},{"size":271,"mtime":1611778168636,"results":"11","hashOfConfig":"9"},{"size":740,"mtime":1611777048567,"results":"12","hashOfConfig":"9"},{"size":1136,"mtime":1611781628781,"results":"13","hashOfConfig":"9"},{"size":535,"mtime":1611781514858,"results":"14","hashOfConfig":"9"},{"size":713,"mtime":1611780527601,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ltunmq",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/reportWebVitals.js",[],"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/index.js",[],["33","34"],"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/App.js",[],["35","36"],"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/PostCreate.js",[],"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/PostList.js",[],"/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/CommentList.js",["37"],"import { useState, useEffect } from \"react\"\n\nimport axios from \"axios\"\n\nconst CommentList = ({ postId }) => {\n  const [comments, setComments] = useState([])\n\n  const fetchData = async () => {\n    const res = await axios.get(`http://localhost:4001/posts/${postId}/comments`)\n\n    setComments(res.data)\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const renderedComments = comments.map((comment) => {\n    return <li key={comment.id}>{comment.content}</li>\n  })\n\n  return <ul>{renderedComments}</ul>\n}\n\nexport default CommentList\n","/Users/ryanjohnson/Dev/Training/udemy/microservices-w-nodejs-and-react/blog/client/src/CommentCreate.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":16,"column":6,"nodeType":"46","endLine":16,"endColumn":8,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [fetchData]",{"range":"53","text":"54"},[347,349],"[fetchData]"]